name: Deploy Internship Matcher

on:
    push:
        branches: [main]

permissions:
    contents: read

jobs:
    # -- Start Frontend Deployment --
    deploy-frontend:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/Checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: 18

            - name: Install & Build Frontend
              run: |
                  cd frontend
                  npm ci
                  npm run build

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Deploy to S3
              run: |
                  aws s3 sync ./frontend/dist s3://internship-matcher-bucket

            - name: Invalidate CloudFront Cache
              run: |
                  aws cloudfront create-invalidation \
                  --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
                  --invalidation-batch "{\"Paths\": {\"Quantity\": 1, \"Items\": [\"/*\"]}, \"CallerReference\": \"github-action-invalidation-$(date +%s)\"}"
    # -- End Frontend Deployment --
    # -- Start Backend Deployment --
    deploy-backend:
        runs-on: ubuntu-latest
        needs: deploy-frontend
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build, Tag, and Push Backend Image
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: $ {{ secrets.ECR_REPOSITORY_NAME }}
                  IMAGE_TAG: latest
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/Dockerfile .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
